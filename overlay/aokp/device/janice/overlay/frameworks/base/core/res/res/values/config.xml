<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2011, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources>

    <integer name="config_deskDockKeepsScreenOn">0</integer>
    <integer name="config_carDockKeepsScreenOn">1</integer>

    <!-- If this is true, the screen will come on when you unplug usb/power/whatever. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>


    <!-- XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. -->

    <!-- An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
         [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  -->
    <!-- the 5th element "resore-time" indicates the number of milliseconds to delay
         before automatically restore the default connection.  Set -1 if the connection
         does not require auto-restore. -->
    <!-- the 6th element indicates boot-time dependency-met value. -->
	
    <string-array translatable="false" name="networkAttributes">
        <item>wifi,1,1,1,-1,true</item>
        <item>mobile,0,0,0,-1,true</item>
        <item>mobile_mms,2,0,2,60000,true</item>
        <item>mobile_supl,3,0,2,60000,true</item>
        <item>mobile_dun,4,0,2,60000,true</item>
        <item>mobile_hipri,5,0,3,60000,true</item>
        <item>mobile_bluetooth,7,7,2,-1,true</item>
        <item>mobile_fota,10,0,2,60000,true</item>
        <item>mobile_ims,11,0,2,60000,true</item>
        <item>mobile_cbs,12,0,2,60000,true</item>
        <item>wifi_p2p,13,1,0,-1,true</item>
        <item>mobile_bip,17,0,2,60000,true</item>
    </string-array>

    <!-- An Array of "[ConnectivityManager connectionType],
         [# simultaneous connection types]"  -->
		 
	<!-- Radio Attributes -->
    <string-array translatable="false" name="radioAttributes">
        <item>"1,1"</item>
        <item>"0,1"</item>
        <item>"7,1"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
		 
     <!-- USB tethering -->
     <string-array translatable="false" name="config_tether_usb_regexs">
         <item>"rndis0"</item>
     </string-array>

		
    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
		 
	<!-- Experimental / WIFI tethering -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"wlan0"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. -->
		 
	<!-- Experimental / Bluetooth tethering -->
    <string-array translatable="false" name="config_tether_bluetooth_regexs">
        <item>"bnep0"</item>
    </string-array>

    <!-- Array of ConnectivityManager.TYPE_xxxx values allowable for tethering -->
    <!-- Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
    <!== [0,1,5,7] for TYPE_MOBILE, TYPE_WIFI, TYPE_MOBILE_HIPRI and TYPE_BLUETOOTH -->
    <integer-array translatable="false" name="config_tether_upstream_types">
        <item>0</item>
        <item>1</item>
        <item>4</item>
        <item>5</item>
        <item>7</item>
    </integer-array>

    <!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
    <bool translatable="false" name="config_wifi_dual_band_support">true</bool>

    <!-- Boolean indicating whether the wifi chipset has background scan support -->
    <bool translatable="false" name="config_wifi_background_scan_support">true</bool>
    
    <!-- Enables or disables fading edges when marquee is enabled in TextView. -->
    <bool name="config_ui_enableFadingMarquee">true</bool>

    <!-- The default iface on which to monitor data use -->
    <string name="config_datause_iface">pdp0</string>
    
    <!-- Allow the menu hard key to be disabled in LockScreen on some devices -->
    <bool name="config_disableMenuKeyInLockScreen">true</bool>

    <!-- Workaround for devices with broken keyboards -->
    <bool name="config_forceDisableHardwareKeyboard">true</bool>

    <!-- Indicate whether the SD card is accessible without removing the battery. -->
    <bool name="config_batterySdCardAccessibility">true</bool>
	
    <!-- The VoiceMail default value is displayed to my own number if it is true -->
    <bool name="config_telephony_use_own_number_for_voicemail">true</bool>
	
    <!-- LUN file to be used by legacy USB manager.
    The existence of this file will be used to determine in the
    legacy USB manager should be started. -->
    <string name="config_legacyUmsLunFile">/sys/devices/virtual/android_usb/android0/f_mass_storage/lun0/file</string>
    
    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
    Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>
    
     <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
     The N entries of this array define N + 1 zones as follows:

     Zone 0:        0 <= LUX < array[0]
     Zone 1:        array[0] <= LUX < array[1]
     ...
     Zone N:        array[N - 1] <= LUX < array[N]
     Zone N + 1:    array[N] <= LUX < infinity

     Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>7</item> <!-- (0 - 7) Very dark room -->
        <item>75</item> <!-- (7 - 75) Poor light ambient -->
        <item>1000</item> <!-- (75 - 1000) Indoor / shadows -->
        <item>10000</item> <!--(1000 - 10000) Outdoor, (10000 - 16000 (max lux value)) Sunlight outdoor -->
    </integer-array>
    
    <!-- Array of output values for LCD backlight corresponding to the LUX values
    in the config_autoBrightnessLevels array.  This array should have size one greater
    than the size of the config_autoBrightnessLevels array.
    This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>20</item> <!-- (0 - 7) Very dark room -->
        <item>30</item> <!-- (7 - 75) Poor light ambient -->
        <item>110</item> <!-- (75 - 1000) Indoor / shadows -->
        <item>175</item> <!-- (1000 - 10000) Outdoor-->
        <item>255</item> <!-- (10000 - 16000) Sunlight outdoor -->
    </integer-array>
    
    <!-- Array of output values for button backlight corresponding to the LUX values
    in the config_autoBrightnessLevels array.  This array should have size one greater
    than the size of the config_autoBrightnessLevels array.
    This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessButtonBacklightValues">
        <item>255</item> <!-- (0 - 7) Very dark room -->
        <item>255</item> <!-- (7 - 75) Poor light ambient -->
        <item>255</item> <!-- (75 - 1000) Indoor / shadows -->
        <item>0</item> <!-- (1000 - 10000) Outdoor-->
        <item>0</item> <!-- (10000 - 16000) Sunlight outdoor -->
    </integer-array>
    
    <!--  Maximum number of supported users -->
    <integer name="config_multiuserMaximumUsers">4</integer>
    
    
    <!-- Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
           to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
           remote submix module.  This module is used to record and stream system
           audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content).
    -->
    <bool name="config_enableWifiDisplay">true</bool>
    
    <!-- Boolean to enable stk functionality on Samsung phones -->
    <bool name="config_samsung_stk">true</bool>
	
    <!-- Device supports LED flashlight -->
    <bool name="config_enableTorch">true</bool>
    
    <!-- True will enable the electron beam screen-off animation. -->
    <bool name="config_screenOffAnimation">true</bool>
    
    <!-- Disabled to activate electron beam animation (CRT-OFF) -->
    <bool name="config_animateScreenLights">false</bool>

</resources>
