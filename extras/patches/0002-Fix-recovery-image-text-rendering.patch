From 3ea2a398f7e2dfa42e3d9c3a449204a2a5904ce2 Mon Sep 17 00:00:00 2001
From: Elliott Hughes <enh@google.com>
Date: Tue, 24 Mar 2015 15:21:48 -0700
Subject: [PATCH 2/6] Fix recovery image text rendering.

Previously most devices would lose the character before a line wrap.
The log's text rendering was starting at offset 4 but none of the
arithmetic was taking this into account. It just happened to work
on the Nexus 9's 1536-pixel wide display (1536/18=85.3) but not on
a device such as the Nexus 5 (1080/18=60).

The only active part of this change is the change from 4 to 0 in the
gr_text call. The rest is just a few bits of trivial cleanup while I
was working out what was going on.

Change-Id: I9279ae323c77bc8b6ea87dc0fe009aaaec6bfa0e
---
 minui/Android.mk |  4 +++-
 minui/graphics.c | 41 +++++++++++++++++++----------------------
 screen_ui.cpp    | 10 +++-------
 3 files changed, 25 insertions(+), 30 deletions(-)

diff --git a/minui/Android.mk b/minui/Android.mk
index e282bbd..ae60c52 100644
--- a/minui/Android.mk
+++ b/minui/Android.mk
@@ -13,8 +13,10 @@ common_additional_dependencies :=
 
 common_whole_static_libraries := libadf
 
+common_cflags += -std=gnu11
+
 ifeq ($(subst ",,$(TARGET_RECOVERY_PIXEL_FORMAT)),ABGR_8888)
-  LOCAL_CFLAGS += -DRECOVERY_ABGR
+  common_cflags += -DRECOVERY_ABGR
 endif
 ifeq ($(subst ",,$(TARGET_RECOVERY_PIXEL_FORMAT)),RGBX_8888)
   common_cflags += -DRECOVERY_RGBX
diff --git a/minui/graphics.c b/minui/graphics.c
index d1aaa0d..3dea930 100644
--- a/minui/graphics.c
+++ b/minui/graphics.c
@@ -138,11 +138,10 @@ static void text_blend(unsigned char* src_p, int src_row_bytes,
                        unsigned char* dst_p, int dst_row_bytes,
                        int width, int height)
 {
-    int i, j;
-    for (j = 0; j < height; ++j) {
+    for (int j = 0; j < height; ++j) {
         unsigned char* sx = src_p;
         unsigned char* px = dst_p;
-        for (i = 0; i < width; ++i) {
+        for (int i = 0; i < width; ++i) {
             unsigned char a = *sx++;
             if (gr_current_a < 255) a = ((int)a * gr_current_a) / 255;
             if (a == 255) {
@@ -185,31 +184,31 @@ void gr_text_blend(int x,int y, GRFont* font)
 
 void gr_text(int x, int y, const char *s, int bold)
 {
-    GRFont *font = gr_font;
-    unsigned off;
+    GRFont* font = gr_font;
 
-    if (!font->texture) return;
-    if (gr_current_a == 0) return;
+    if (!font->texture || gr_current_a == 0) return;
 
     bold = bold && (font->texture->height != font->cheight);
 
     x += overscan_offset_x;
     y += overscan_offset_y;
 
-    while((off = *s++)) {
-        off -= 32;
+    unsigned char ch;
+    while ((ch = *s++)) {
         if (outside(x, y) || outside(x+font->cwidth-1, y+font->cheight-1)) break;
-        if (off < 96) {
 
-            unsigned char* src_p = font->texture->data + (off * font->cwidth) +
-                (bold ? font->cheight * font->texture->row_bytes : 0);
-            unsigned char* dst_p = gr_draw->data + y*gr_draw->row_bytes + x*gr_draw->pixel_bytes;
+        if (ch < ' ' || ch > '~') {
+            ch = '?';
+        }
+
+        unsigned char* src_p = font->texture->data + ((ch - ' ') * font->cwidth) +
+                               (bold ? font->cheight * font->texture->row_bytes : 0);
+        unsigned char* dst_p = gr_draw->data + y*gr_draw->row_bytes + x*gr_draw->pixel_bytes;
 
-            text_blend(src_p, font->texture->row_bytes,
-                       dst_p, gr_draw->row_bytes,
-                       font->cwidth, font->cheight);
+        text_blend(src_p, font->texture->row_bytes,
+                   dst_p, gr_draw->row_bytes,
+                   font->cwidth, font->cheight);
 
-        }
         x += font->cwidth;
     }
 }
@@ -252,14 +251,12 @@ void gr_color(unsigned char r, unsigned char g, unsigned char b, unsigned char a
 
 void gr_clear()
 {
-    if (gr_current_r == gr_current_g &&
-        gr_current_r == gr_current_b) {
+    if (gr_current_r == gr_current_g && gr_current_r == gr_current_b) {
         memset(gr_draw->data, gr_current_r, gr_draw->height * gr_draw->row_bytes);
     } else {
-        int x, y;
         unsigned char* px = gr_draw->data;
-        for (y = 0; y < gr_draw->height; ++y) {
-            for (x = 0; x < gr_draw->width; ++x) {
+        for (int y = 0; y < gr_draw->height; ++y) {
+            for (int x = 0; x < gr_draw->width; ++x) {
                 *px++ = gr_current_r;
                 *px++ = gr_current_g;
                 *px++ = gr_current_b;
diff --git a/screen_ui.cpp b/screen_ui.cpp
index c5319ef..66ca8f8 100644
--- a/screen_ui.cpp
+++ b/screen_ui.cpp
@@ -334,12 +334,11 @@ void ScreenRecoveryUI::draw_screen_locked()
             gr_font_size(&cx, &cy);
             // display from the bottom up, until we hit the top of the
             // screen or we've displayed the entire text buffer.
-            int ty;
             int row = (text_first_row+log_text_rows-1) % log_text_rows;
             for (int ty = gr_fb_height() - cy, count = 0;
                  ty > y+2 && count < log_text_rows;
                  ty -= (cy+2), ++count) {
-                gr_text(4, ty, text[row], 0);
+                gr_text(0, ty, text[row], 0);
                 --row;
                 if (row < 0) row = log_text_rows-1;
             }
@@ -603,8 +602,7 @@ void ScreenRecoveryUI::Print(const char *fmt, ...)
     // This can get called before ui_init(), so be careful.
     pthread_mutex_lock(&updateMutex);
     if (log_text_rows > 0 && log_text_cols > 0) {
-        char *ptr;
-        for (ptr = buf; *ptr != '\0'; ++ptr) {
+        for (char* ptr = buf; *ptr != '\0'; ++ptr) {
             if (*ptr == '\n' || text_col >= log_text_cols) {
                 text[text_row][text_col] = '\0';
                 text_col = 0;
@@ -701,13 +699,12 @@ void ScreenRecoveryUI::StartMenu(const char* const * headers, const char* const
 }
 
 int ScreenRecoveryUI::SelectMenu(int sel, bool abs) {
-    int old_sel;
     pthread_mutex_lock(&updateMutex);
     if (abs) {
         sel += menu_show_start;
     }
     if (show_menu > 0) {
-        old_sel = menu_sel;
+        int old_sel = menu_sel;
         menu_sel = sel;
         if (menu_sel < 0) menu_sel = menu_items + menu_sel;
         if (menu_sel >= menu_items) menu_sel = menu_sel - menu_items;
@@ -725,7 +722,6 @@ int ScreenRecoveryUI::SelectMenu(int sel, bool abs) {
 }
 
 void ScreenRecoveryUI::EndMenu() {
-    int i;
     pthread_mutex_lock(&updateMutex);
     if (show_menu > 0 && text_rows > 0 && text_cols > 0) {
         show_menu = 0;
-- 
1.9.1

