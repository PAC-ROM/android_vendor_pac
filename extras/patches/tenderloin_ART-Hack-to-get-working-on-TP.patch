From 0d903f6f7cc8b5b680ea803b891dc3c285751ae3 Mon Sep 17 00:00:00 2001
From: flintman <flintman@flintmancomputers.com>
Date: Fri, 10 Jul 2015 16:10:58 -0600
Subject: [PATCH] art:  Hack to get working on TP

Change-Id: I7e215f182b2bca661d7ead2a16db0f0a77dd2839
---
 runtime/gc/heap.cc |    8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/runtime/gc/heap.cc b/runtime/gc/heap.cc
index e629b3d..f8c12da 100644
--- a/runtime/gc/heap.cc
+++ b/runtime/gc/heap.cc
@@ -432,8 +432,11 @@ Heap::Heap(size_t initial_size, size_t growth_limit, size_t min_free, size_t max
     mark_compact_collector_ = new collector::MarkCompact(this);
     garbage_collectors_.push_back(mark_compact_collector_);
   }
-#ifndef DONT_CHECK_GAP
-  if (GetImageSpace() != nullptr && non_moving_space_ != nullptr) {
+#if defined(DONT_CHECK_GAP)
+    if (0 && GetImageSpace() != nullptr && non_moving_space_ != nullptr) {
+#else
+    if (GetImageSpace() != nullptr && non_moving_space_ != nullptr) {
+#endif
     // Check that there's no gap between the image space and the non moving space so that the
     // immune region won't break (eg. due to a large object allocated in the gap).
     bool no_gap = MemMap::CheckNoGaps(GetImageSpace()->GetMemMap(),
@@ -443,7 +446,6 @@ Heap::Heap(size_t initial_size, size_t growth_limit, size_t min_free, size_t max
       LOG(FATAL) << "There's a gap between the image space and the main space";
     }
   }
-#endif
   if (running_on_valgrind_) {
     Runtime::Current()->GetInstrumentation()->InstrumentQuickAllocEntryPoints();
   }
-- 
1.7.9.5

