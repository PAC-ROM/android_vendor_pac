From 77978673cadabd07bd4838ee6b1febcb1b55d5b7 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Fri, 23 Nov 2012 12:27:25 +0700
Subject: [PATCH] linker: restore prelink support

Prelink support is required to load old vendor binary blobs
on many devices properly

This commit partially reverts 4688279db5dcc4004941e7f133c4a1c3617d842c

bionic: linker: fix prelink support

load_bias_ needs to be calculated from the min_vaddr, not the
prelink address

Fixes

couldn't map "libraryname.so" segment 1: Invalid argument

Change-Id: Iee5325e048daee78e8dcaa47c87454b908c89b4e
---
 linker/linker_phdr.cpp | 39 +++++++++++++++++++++++++++++++++++++--
 linker/linker_phdr.h   |  4 ++++
 2 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/linker/linker_phdr.cpp b/linker/linker_phdr.cpp
index 0b99d20..700ecab 100644
--- a/linker/linker_phdr.cpp
+++ b/linker/linker_phdr.cpp
@@ -122,7 +122,7 @@
 ElfReader::ElfReader(const char* name, int fd)
     : name_(name), fd_(fd),
       phdr_num_(0), phdr_mmap_(NULL), phdr_table_(NULL), phdr_size_(0),
-      load_start_(NULL), load_size_(0), load_bias_(0),
+      load_start_(NULL), load_size_(0), load_bias_(0), required_base_(0),
       loaded_phdr_(NULL) {
 }
 
@@ -285,6 +285,36 @@ size_t phdr_table_get_load_size(const ElfW(Phdr)* phdr_table, size_t phdr_count,
   return max_vaddr - min_vaddr;
 }
 
+typedef struct {
+    long mmap_addr;
+    char tag[4]; /* 'P', 'R', 'E', ' ' */
+} prelink_info_t;
+
+/* Returns the requested base address if the library is prelinked,
+ * and 0 otherwise.  */
+static ElfW(Addr) is_prelinked(int fd, const char *name)
+{
+    off_t sz = lseek(fd, -sizeof(prelink_info_t), SEEK_END);
+    if (sz < 0) {
+        DL_ERR("lseek() failed!");
+        return 0;
+    }
+
+    prelink_info_t info;
+    int rc = TEMP_FAILURE_RETRY(read(fd, &info, sizeof(info)));
+    if (rc != sizeof(info)) {
+        DL_ERR("Could not read prelink_info_t structure for `%s`\n", name);
+        return 0;
+    }
+
+    if (memcmp(info.tag, "PRE ", 4)) {
+        DL_ERR("`%s` is not a prelinked library\n", name);
+        return 0;
+    }
+
+    return (unsigned long)info.mmap_addr;
+}
+
 // Reserve a virtual address range big enough to hold all loadable
 // segments of a program header table. This is done by creating a
 // private anonymous mmap() with PROT_NONE.
@@ -316,7 +346,12 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
              reserved_size - load_size_, load_size_, name_);
       return false;
     }
+    required_base_ = is_prelinked(fd_, name_);
     int mmap_flags = MAP_PRIVATE | MAP_ANONYMOUS;
+    if (required_base_ != 0) {
+      mmap_flags |= MAP_FIXED;
+      addr = (uint8_t*) required_base_;
+    }
     start = mmap(addr, load_size_, PROT_NONE, mmap_flags, -1, 0);
     if (start == MAP_FAILED) {
       DL_ERR("couldn't reserve %zd bytes of address space for \"%s\"", load_size_, name_);
@@ -327,7 +362,7 @@ bool ElfReader::ReserveAddressSpace(const android_dlextinfo* extinfo) {
   }
 
   load_start_ = start;
-  load_bias_ = reinterpret_cast<uint8_t*>(start) - addr;
+  load_bias_ = reinterpret_cast<uint8_t*>(start) - reinterpret_cast<uint8_t*>(min_vaddr);
   return true;
 }
 
diff --git a/linker/linker_phdr.h b/linker/linker_phdr.h
index 611f1a7..2985d18 100644
--- a/linker/linker_phdr.h
+++ b/linker/linker_phdr.h
@@ -48,6 +48,7 @@ class ElfReader {
   ElfW(Addr) load_start() { return reinterpret_cast<ElfW(Addr)>(load_start_); }
   size_t load_size() { return load_size_; }
   ElfW(Addr) load_bias() { return load_bias_; }
+  ElfW(Addr) required_base() { return required_base_; }
   const ElfW(Phdr)* loaded_phdr() { return loaded_phdr_; }
 
  private:
@@ -75,6 +76,9 @@ class ElfReader {
   size_t load_size_;
   // Load bias.
   ElfW(Addr) load_bias_;
+  // For prelinked libraries, mandatory load address of the first
+  // loadable segment. 0 otherwise.
+  ElfW(Addr) required_base_;
 
   // Loaded phdr.
   const ElfW(Phdr)* loaded_phdr_;
