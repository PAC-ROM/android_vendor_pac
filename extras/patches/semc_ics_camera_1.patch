From db972b6c97719b2f87ca75d06e6f3ee3ba0bce31 Mon Sep 17 00:00:00 2001
From: ZoliN <zltnngy@gmail.com>
Date: Sun, 1 Jun 2014 22:03:15 +0200
Subject: [PATCH] libstagefright: Allow using camera recording buffer as input
 for encoder

Can be enabled with global cflag SEMC_ICS_CAMERA_BLOB

Change-Id: I6dce1390bd611e9ce318d2aef0da22f843a2632b
---
 camera/Camera.cpp                                  |   10 +++
 include/camera/Camera.h                            |    8 +++
 include/camera/ICamera.h                           |    8 +++
 include/media/IOMX.h                               |   16 +++++
 include/media/stagefright/CameraSource.h           |    4 ++
 include/media/stagefright/MediaSource.h            |    9 +++
 include/media/stagefright/OMXCodec.h               |    3 +
 media/libmedia/IOMX.cpp                            |    7 ++
 media/libstagefright/CameraSource.cpp              |   34 +++++++++
 media/libstagefright/MediaSource.cpp               |    6 ++
 media/libstagefright/OMXClient.cpp                 |   14 ++++
 media/libstagefright/OMXCodec.cpp                  |   61 +++++++++++++++-
 media/libstagefright/include/OMX.h                 |    6 ++
 media/libstagefright/include/OMXNodeInstance.h     |    6 ++
 media/libstagefright/omx/OMX.cpp                   |    9 +++
 media/libstagefright/omx/OMXNodeInstance.cpp       |   73 +++++++++++++++++---
 services/camera/libcameraservice/CameraService.h   |    3 +
 .../camera/libcameraservice/api1/CameraClient.cpp  |    6 ++
 .../camera/libcameraservice/api1/CameraClient.h    |    3 +
 .../device1/CameraHardwareInterface.h              |   35 ++++++++++
 20 files changed, 311 insertions(+), 10 deletions(-)

diff --git a/camera/Camera.cpp b/camera/Camera.cpp
index 22199fa..5c40c57 100644
--- a/camera/Camera.cpp
+++ b/camera/Camera.cpp
@@ -238,6 +238,16 @@ status_t Camera::sendCommand(int32_t cmd, int32_t arg1, int32_t arg2)
     return c->sendCommand(cmd, arg1, arg2);
 }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+status_t Camera::getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer)
+{
+    ALOGV("getRecordingBuffer");
+    sp <ICamera> c = mCamera;
+    if (c == 0) return NO_INIT;
+    return c->getRecordingBuffer(index, buffer);
+}
+#endif
+
 void Camera::setListener(const sp<CameraListener>& listener)
 {
     Mutex::Autolock _l(mLock);
diff --git a/include/camera/Camera.h b/include/camera/Camera.h
index 79682b8..310c9a0 100644
--- a/include/camera/Camera.h
+++ b/include/camera/Camera.h
@@ -26,6 +26,10 @@
 #include <camera/ICameraService.h>
 #include <camera/ICamera.h>
 #include <camera/CameraBase.h>
+#ifdef SEMC_ICS_CAMERA_BLOB
+#include <binder/IMemory.h>
+#include <binder/MemoryBase.h>
+#endif
 
 namespace android {
 
@@ -125,6 +129,10 @@ public:
             // tell camera hal to store meta data or real YUV in video buffers.
             status_t    storeMetaDataInBuffers(bool enabled);
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+            status_t    getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer);
+#endif
+
             void        setListener(const sp<CameraListener>& listener);
             void        setRecordingProxyListener(const sp<ICameraRecordingProxyListener>& listener);
 
diff --git a/include/camera/ICamera.h b/include/camera/ICamera.h
index b025735..b068d01 100644
--- a/include/camera/ICamera.h
+++ b/include/camera/ICamera.h
@@ -23,6 +23,10 @@
 #include <binder/IMemory.h>
 #include <utils/String8.h>
 #include <camera/Camera.h>
+#ifdef SEMC_ICS_CAMERA_BLOB
+#include <binder/IMemory.h>
+#include <binder/MemoryBase.h>
+#endif
 
 namespace android {
 
@@ -111,6 +115,10 @@ public:
 
     // tell the camera hal to store meta data or real YUV data in video buffers.
     virtual status_t        storeMetaDataInBuffers(bool enabled) = 0;
+
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t        getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer) {};
+#endif
 };
 
 // ----------------------------------------------------------------------------
diff --git a/include/media/IOMX.h b/include/media/IOMX.h
index 6643736..6fa25ff 100644
--- a/include/media/IOMX.h
+++ b/include/media/IOMX.h
@@ -29,6 +29,16 @@
 
 namespace android {
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+typedef struct OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO
+{
+    /** pmem file descriptor */
+    OMX_U32 pmem_fd;
+    /** Offset from pmem device base address */
+    OMX_U32 offset;
+}OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO;
+#endif
+
 class IMemory;
 class IOMXObserver;
 class IOMXRenderer;
@@ -97,6 +107,12 @@ public:
             node_id node, OMX_U32 port_index, const sp<IMemory> &params,
             buffer_id *buffer) = 0;
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t useBufferPmem(
+            node_id node, OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+            buffer_id *buffer) = 0;
+#endif
+
     virtual status_t useGraphicBuffer(
             node_id node, OMX_U32 port_index,
             const sp<GraphicBuffer> &graphicBuffer, buffer_id *buffer) = 0;
diff --git a/include/media/stagefright/CameraSource.h b/include/media/stagefright/CameraSource.h
index 013d2b4..25153ee 100644
--- a/include/media/stagefright/CameraSource.h
+++ b/include/media/stagefright/CameraSource.h
@@ -176,6 +176,10 @@ protected:
                  const sp<IGraphicBufferProducer>& surface,
                  bool storeMetaDataInVideoBuffers);
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer);
+#endif
+
     virtual void startCameraRecording();
     virtual void releaseRecordingFrame(const sp<IMemory>& frame);
 
diff --git a/include/media/stagefright/MediaSource.h b/include/media/stagefright/MediaSource.h
index 694be23..db5207f 100644
--- a/include/media/stagefright/MediaSource.h
+++ b/include/media/stagefright/MediaSource.h
@@ -23,6 +23,11 @@
 #include <media/stagefright/MediaErrors.h>
 #include <utils/RefBase.h>
 #include <utils/Vector.h>
+#ifdef SEMC_ICS_CAMERA_BLOB
+#include <binder/IMemory.h>
+#include <binder/MemoryBase.h>
+#include <binder/MemoryHeapBase.h>
+#endif
 
 namespace android {
 
@@ -63,6 +68,10 @@ struct MediaSource : public virtual RefBase {
     virtual void notifyError(status_t err) {}
 #endif
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer);
+#endif
+
     // Options that modify read() behaviour. The default is to
     // a) not request a seek
     // b) not be late, i.e. lateness_us = 0
diff --git a/include/media/stagefright/OMXCodec.h b/include/media/stagefright/OMXCodec.h
index 9b7a656..89d3078 100644
--- a/include/media/stagefright/OMXCodec.h
+++ b/include/media/stagefright/OMXCodec.h
@@ -103,6 +103,9 @@ struct OMXCodec : public MediaSource,
         kSupportsMultipleFramesPerInputBuffer = 1024,
         kRequiresLargerEncoderOutputBuffer    = 2048,
         kOutputBuffersAreUnreadable           = 4096,
+#ifdef SEMC_ICS_CAMERA_BLOB
+        kXperiaAvoidMemcopyInputRecordingFrames = 32768,
+#endif
 #if defined(OMAP_ENHANCEMENT)
         kAvoidMemcopyInputRecordingFrames     = 0x20000000,
 #endif
diff --git a/media/libmedia/IOMX.cpp b/media/libmedia/IOMX.cpp
index 71ce320..1da9f29 100644
--- a/media/libmedia/IOMX.cpp
+++ b/media/libmedia/IOMX.cpp
@@ -262,6 +262,13 @@ public:
         return err;
     }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t useBufferPmem(
+            node_id node, OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+            buffer_id *buffer) {
+        return OK;
+    }
+#endif
 
     virtual status_t useGraphicBuffer(
             node_id node, OMX_U32 port_index,
diff --git a/media/libstagefright/CameraSource.cpp b/media/libstagefright/CameraSource.cpp
index 295c0f5..9eb19f1 100644
--- a/media/libstagefright/CameraSource.cpp
+++ b/media/libstagefright/CameraSource.cpp
@@ -39,6 +39,11 @@
 #endif
 
 #include "include/ExtendedUtils.h"
+#ifdef SEMC_ICS_CAMERA_BLOB
+#include <binder/IMemory.h>
+#include <binder/MemoryBase.h>
+#include <binder/MemoryHeapBase.h>
+#endif
 
 namespace android {
 
@@ -513,6 +518,17 @@ status_t CameraSource::init(
     return err;
 }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+sp<MemoryBase> *mRecordingBuffers;
+
+status_t CameraSource::getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer)
+{
+    ALOGV("getRecordingbuffer");
+    *buffer = &mRecordingBuffers[index];
+    return OK;
+}
+#endif
+
 status_t CameraSource::initWithCameraAccess(
         const sp<ICamera>& camera,
         const sp<ICameraRecordingProxy>& proxy,
@@ -590,6 +606,16 @@ status_t CameraSource::initWithCameraAccess(
     ExtendedUtils::HFR::setHFRIfEnabled(params, mMeta);
 #endif
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    sp<MemoryBase>* ptrbuffer;
+    mRecordingBuffers = new sp<MemoryBase>[9];
+    for (uint_t i = 0; i < 9; i++) {
+        mCamera->getRecordingBuffer(i, &ptrbuffer);
+        ALOGV("Camerabuffer 0 ptr %p", ptrbuffer);
+        mRecordingBuffers[i] = *ptrbuffer;
+    }
+#endif
+
     return OK;
 }
 
@@ -697,6 +723,9 @@ void CameraSource::stopCameraRecording() {
         mCamera->setListener(NULL);
         mCamera->stopRecording();
     }
+#ifdef SEMC_ICS_CAMERA_BLOB
+    delete [] mRecordingBuffers;
+#endif
 }
 
 void CameraSource::releaseCamera() {
@@ -916,8 +945,13 @@ void CameraSource::dataCallbackTimestamp(int64_t timestampUs,
     mFramesReceived.push_back(data);
     int64_t timeUs = mStartTimeUs + (timestampUs - mFirstFrameTimeUs);
     mFrameTimes.push_back(timeUs);
+#ifdef SEMC_ICS_CAMERA_BLOB
+    ALOGV("initial delay: %lld, current time stamp: %lld, frames received: %d, frames being encoded: %d",
+        mStartTimeUs, timeUs, mFramesReceived.size(), mFramesBeingEncoded.size());
+#else
     ALOGV("initial delay: %lld, current time stamp: %lld",
         mStartTimeUs, timeUs);
+#endif
     mFrameAvailableCondition.signal();
 }
 
diff --git a/media/libstagefright/MediaSource.cpp b/media/libstagefright/MediaSource.cpp
index fd0e79c..c35aa74 100644
--- a/media/libstagefright/MediaSource.cpp
+++ b/media/libstagefright/MediaSource.cpp
@@ -24,6 +24,12 @@ MediaSource::~MediaSource() {}
 
 ////////////////////////////////////////////////////////////////////////////////
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+status_t MediaSource::getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer) {
+    return OK;
+}
+#endif
+
 MediaSource::ReadOptions::ReadOptions() {
     reset();
 }
diff --git a/media/libstagefright/OMXClient.cpp b/media/libstagefright/OMXClient.cpp
index fb87de0..41f2d25 100644
--- a/media/libstagefright/OMXClient.cpp
+++ b/media/libstagefright/OMXClient.cpp
@@ -83,6 +83,12 @@ struct MuxOMX : public IOMX {
             node_id node, OMX_U32 port_index, const sp<IMemory> &params,
             buffer_id *buffer);
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t useBufferPmem(
+            node_id node, OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+            buffer_id *buffer);
+#endif
+
     virtual status_t useGraphicBuffer(
             node_id node, OMX_U32 port_index,
             const sp<GraphicBuffer> &graphicBuffer, buffer_id *buffer);
@@ -295,6 +301,14 @@ status_t MuxOMX::useBuffer(
     return getOMX(node)->useBuffer(node, port_index, params, buffer);
 }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+status_t MuxOMX::useBufferPmem(
+        node_id node, OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+        buffer_id *buffer) {
+    return getOMX(node)->useBufferPmem(node, portIndex, pmem_info, size, vaddr, buffer);
+}
+#endif
+
 status_t MuxOMX::useGraphicBuffer(
         node_id node, OMX_U32 port_index,
         const sp<GraphicBuffer> &graphicBuffer, buffer_id *buffer) {
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 269028a..25e0f24 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -80,6 +80,13 @@
 #include "include/FLACDecoder.h"
 #endif
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+#include <binder/IMemory.h>
+#include <binder/MemoryBase.h>
+#include <binder/MemoryHeapBase.h>
+#define OMX_COMPONENT_CAPABILITY_TYPE_INDEX 0xFF7A347
+#endif
+
 namespace android {
 
 #ifdef USE_SAMSUNG_COLORFORMAT
@@ -2163,6 +2170,15 @@ status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
     size_t totalSize = def.nBufferCountActual * def.nBufferSize;
     mDealer[portIndex] = new MemoryDealer(totalSize, "OMXCodec");
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO pmeminfo;
+
+    if (portIndex == kPortIndexInput && !strncmp(mComponentName,"OMX.qcom.video.encoder.",23 )) {
+        mQuirks |= kXperiaAvoidMemcopyInputRecordingFrames;
+        mQuirks &= ~kRequiresAllocateBufferOnInputPorts;
+    }
+#endif
+
     for (OMX_U32 i = 0; i < def.nBufferCountActual; ++i) {
         sp<IMemory> mem = mDealer[portIndex]->allocate(def.nBufferSize);
         CHECK(mem.get() != NULL);
@@ -2197,6 +2213,18 @@ status_t OMXCodec::allocateBuffersOnPort(OMX_U32 portIndex) {
                 err = mOMX->allocateBufferWithBackup(
                         mNode, portIndex, mem, &buffer);
             }
+#ifdef SEMC_ICS_CAMERA_BLOB
+        } else if (portIndex == kPortIndexInput
+                && (mQuirks & kXperiaAvoidMemcopyInputRecordingFrames)) {
+            sp<MemoryBase>* ptrbuffer;
+            mSource->getRecordingBuffer(i, &ptrbuffer);
+            ssize_t offset;
+            size_t size;
+            sp<IMemoryHeap> heap = (*ptrbuffer)->getMemory(&offset, &size);
+            pmeminfo.pmem_fd = heap->getHeapID();
+            pmeminfo.offset = offset;
+            err = mOMX->useBufferPmem(mNode, portIndex, &pmeminfo,def.nBufferSize, (*ptrbuffer)->pointer(), &buffer);
+#endif
         } else {
             err = mOMX->useBuffer(mNode, portIndex, mem, &buffer);
         }
@@ -3844,6 +3872,19 @@ bool OMXCodec::drainInputBuffer(BufferInfo *info) {
                 releaseBuffer = false;
                 info->mMediaBuffer = srcBuffer;
 #endif
+#ifdef SEMC_ICS_CAMERA_BLOB
+        } else if (mIsEncoder && (mQuirks & kXperiaAvoidMemcopyInputRecordingFrames)) {
+                CHECK(mOMXLivesLocally && offset == 0);
+
+                OMX_BUFFERHEADERTYPE *header =
+                    (OMX_BUFFERHEADERTYPE *) info->mBuffer;
+
+                header->pBuffer =
+                    (OMX_U8 *) srcBuffer->data() + srcBuffer->range_offset();
+
+                releaseBuffer = false;
+                info->mMediaBuffer = srcBuffer;
+#endif
         } else {
 #ifdef USE_SAMSUNG_COLORFORMAT
             OMX_PARAM_PORTDEFINITIONTYPE def;
@@ -3975,7 +4016,7 @@ bool OMXCodec::drainInputBuffer(BufferInfo *info) {
 
     // This component does not ever signal the EOS flag on output buffers,
     // Thanks for nothing.
-    if (mSignalledEOS && (!strcmp(mComponentName, "OMX.TI.Video.encoder") || 
+    if (mSignalledEOS && (!strcmp(mComponentName, "OMX.TI.Video.encoder") ||
                           !strcmp(mComponentName, "OMX.TI.720P.Encoder"))) {
         mNoMoreOutputData = true;
         mBufferFilled.signal();
@@ -6044,6 +6085,24 @@ void OMXCodec::initOutputFormat(const sp<MetaData> &inputFormat) {
 #ifdef QCOM_HARDWARE
             } else {
                 ExtendedUtils::HFR::copyHFRParams(inputFormat, mOutputFormat);
+#ifdef SEMC_ICS_CAMERA_BLOB
+                typedef struct OMXComponentCapabilityFlagsType
+                {
+                  OMX_BOOL iIsOMXComponentMultiThreaded;
+                  OMX_BOOL iOMXComponentSupportsExternalOutputBufferAlloc;
+                  OMX_BOOL iOMXComponentSupportsExternalInputBufferAlloc;
+                  OMX_BOOL iOMXComponentSupportsMovableInputBuffers;
+                  OMX_BOOL iOMXComponentSupportsPartialFrames;
+                  OMX_BOOL iOMXComponentUsesNALStartCodes;
+                  OMX_BOOL iOMXComponentCanHandleIncompleteFrames;
+                  OMX_BOOL iOMXComponentUsesFullAVCFrames;
+
+                } OMXComponentCapabilityFlagsType;
+
+                OMXComponentCapabilityFlagsType junk;
+                mOMX->getParameter( mNode, (OMX_INDEXTYPE) OMX_COMPONENT_CAPABILITY_TYPE_INDEX,
+                                    &junk, sizeof(junk) );
+#endif
 #endif
             }
             break;
diff --git a/media/libstagefright/include/OMX.h b/media/libstagefright/include/OMX.h
index 31a5077..2bdd414 100644
--- a/media/libstagefright/include/OMX.h
+++ b/media/libstagefright/include/OMX.h
@@ -79,6 +79,12 @@ public:
             node_id node, OMX_U32 port_index, const sp<IMemory> &params,
             buffer_id *buffer);
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t useBufferPmem(
+            node_id node, OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+            buffer_id *buffer);
+#endif
+
     virtual status_t useGraphicBuffer(
             node_id node, OMX_U32 port_index,
             const sp<GraphicBuffer> &graphicBuffer, buffer_id *buffer);
diff --git a/media/libstagefright/include/OMXNodeInstance.h b/media/libstagefright/include/OMXNodeInstance.h
index 339179e..b82ef68 100644
--- a/media/libstagefright/include/OMXNodeInstance.h
+++ b/media/libstagefright/include/OMXNodeInstance.h
@@ -66,6 +66,12 @@ struct OMXNodeInstance {
             OMX_U32 portIndex, const sp<IMemory> &params,
             OMX::buffer_id *buffer);
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    status_t useBufferPmem(
+            OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+            OMX::buffer_id *buffer);
+#endif
+
     status_t useGraphicBuffer(
             OMX_U32 portIndex, const sp<GraphicBuffer> &graphicBuffer,
             OMX::buffer_id *buffer);
diff --git a/media/libstagefright/omx/OMX.cpp b/media/libstagefright/omx/OMX.cpp
index 870b7ff..5f80853 100644
--- a/media/libstagefright/omx/OMX.cpp
+++ b/media/libstagefright/omx/OMX.cpp
@@ -345,6 +345,15 @@ status_t OMX::useBuffer(
             port_index, params, buffer);
 }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+status_t OMX::useBufferPmem(
+        node_id node, OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+        buffer_id *buffer) {
+    return findInstance(node)->useBufferPmem(
+            portIndex, pmem_info, size, vaddr, buffer);
+}
+#endif
+
 status_t OMX::useGraphicBuffer(
         node_id node, OMX_U32 port_index,
         const sp<GraphicBuffer> &graphicBuffer, buffer_id *buffer) {
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index de08e18..c0812b7 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -497,6 +497,36 @@ status_t OMXNodeInstance::useBuffer(
     return OK;
 }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+status_t OMXNodeInstance::useBufferPmem(
+        OMX_U32 portIndex, OMX_QCOM_PLATFORM_PRIVATE_PMEM_INFO *pmem_info, OMX_U32 size, void *vaddr,
+        OMX::buffer_id *buffer) {
+    Mutex::Autolock autoLock(mLock);
+
+    OMX_BUFFERHEADERTYPE *header;
+
+    OMX_ERRORTYPE err = OMX_UseBuffer(
+            mHandle, &header, portIndex, pmem_info,
+            size, static_cast<OMX_U8 *>(vaddr));
+
+    if (err != OMX_ErrorNone) {
+        ALOGE("OMX_UseBuffer failed with error %d (0x%08x)", err, err);
+
+        *buffer = 0;
+
+        return UNKNOWN_ERROR;
+    }
+
+    header->pAppPrivate = NULL;
+
+    *buffer = header;
+
+    addActiveBuffer(portIndex, *buffer);
+
+    return OK;
+}
+#endif
+
 status_t OMXNodeInstance::useGraphicBuffer2_l(
         OMX_U32 portIndex, const sp<GraphicBuffer>& graphicBuffer,
         OMX::buffer_id *buffer) {
@@ -768,7 +798,14 @@ status_t OMXNodeInstance::freeBuffer(
     Mutex::Autolock autoLock(mLock);
 
     OMX_BUFFERHEADERTYPE *header = (OMX_BUFFERHEADERTYPE *)buffer;
-    BufferMeta *buffer_meta = static_cast<BufferMeta *>(header->pAppPrivate);
+    BufferMeta *buffer_meta;
+#ifdef SEMC_ICS_CAMERA_BLOB
+    if (header->pAppPrivate) {
+#endif
+        buffer_meta = static_cast<BufferMeta *>(header->pAppPrivate);
+#ifdef SEMC_ICS_CAMERA_BLOB
+    }
+#endif
 
     OMX_ERRORTYPE err = OMX_FreeBuffer(mHandle, portIndex, header);
 
@@ -778,8 +815,14 @@ status_t OMXNodeInstance::freeBuffer(
         ALOGI("OMX_FreeBuffer for buffer header %p successful", header);
         removeActiveBuffer(portIndex, buffer);
 
-        delete buffer_meta;
-        buffer_meta = NULL;
+#ifdef SEMC_ICS_CAMERA_BLOB
+        if (header->pAppPrivate) {
+#endif
+            delete buffer_meta;
+            buffer_meta = NULL;
+#ifdef SEMC_ICS_CAMERA_BLOB
+        }
+#endif
     }
 
     return StatusFromOMXError(err);
@@ -810,9 +853,15 @@ status_t OMXNodeInstance::emptyBuffer(
     header->nFlags = flags;
     header->nTimeStamp = timestamp;
 
-    BufferMeta *buffer_meta =
-        static_cast<BufferMeta *>(header->pAppPrivate);
-    buffer_meta->CopyToOMX(header);
+    BufferMeta *buffer_meta;
+#ifdef SEMC_ICS_CAMERA_BLOB
+    if (header->pAppPrivate) {
+#endif
+        buffer_meta = static_cast<BufferMeta *>(header->pAppPrivate);
+        buffer_meta->CopyToOMX(header);
+#ifdef SEMC_ICS_CAMERA_BLOB
+    }
+#endif
 
     OMX_ERRORTYPE err = OMX_EmptyThisBuffer(mHandle, header);
 
@@ -908,10 +957,16 @@ void OMXNodeInstance::onMessage(const omx_message &msg) {
             static_cast<OMX_BUFFERHEADERTYPE *>(
                     msg.u.extended_buffer_data.buffer);
 
-        BufferMeta *buffer_meta =
-            static_cast<BufferMeta *>(buffer->pAppPrivate);
 
-        buffer_meta->CopyFromOMX(buffer);
+        BufferMeta *buffer_meta;
+#ifdef SEMC_ICS_CAMERA_BLOB
+        if (buffer->pAppPrivate) {
+#endif
+            buffer_meta = static_cast<BufferMeta *>(buffer->pAppPrivate);
+            buffer_meta->CopyFromOMX(buffer);
+#ifdef SEMC_ICS_CAMERA_BLOB
+        }
+#endif
 
         if (bufferSource != NULL) {
             // fix up the buffer info (especially timestamp) if needed
diff --git a/services/camera/libcameraservice/CameraService.h b/services/camera/libcameraservice/CameraService.h
index 67f27ee..4b0d76d 100644
--- a/services/camera/libcameraservice/CameraService.h
+++ b/services/camera/libcameraservice/CameraService.h
@@ -239,6 +239,9 @@ public:
         virtual status_t      setParameters(const String8& params) = 0;
         virtual String8       getParameters() const = 0;
         virtual status_t      sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) = 0;
+#ifdef SEMC_ICS_CAMERA_BLOB
+        virtual status_t      getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer)  { return OK; };
+#endif
 
         // Interface used by CameraService
         Client(const sp<CameraService>& cameraService,
diff --git a/services/camera/libcameraservice/api1/CameraClient.cpp b/services/camera/libcameraservice/api1/CameraClient.cpp
index 1629e05..3e28204 100644
--- a/services/camera/libcameraservice/api1/CameraClient.cpp
+++ b/services/camera/libcameraservice/api1/CameraClient.cpp
@@ -720,6 +720,12 @@ status_t CameraClient::sendCommand(int32_t cmd, int32_t arg1, int32_t arg2) {
     return mHardware->sendCommand(cmd, arg1, arg2);
 }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+status_t CameraClient::getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer) {
+    return mHardware->getRecordingBuffer(index, buffer);
+}
+#endif
+
 // ----------------------------------------------------------------------------
 
 void CameraClient::enableMsgType(int32_t msgType) {
diff --git a/services/camera/libcameraservice/api1/CameraClient.h b/services/camera/libcameraservice/api1/CameraClient.h
index f460763..9ea4e20 100644
--- a/services/camera/libcameraservice/api1/CameraClient.h
+++ b/services/camera/libcameraservice/api1/CameraClient.h
@@ -55,6 +55,9 @@ public:
     virtual status_t        setParameters(const String8& params);
     virtual String8         getParameters() const;
     virtual status_t        sendCommand(int32_t cmd, int32_t arg1, int32_t arg2);
+#ifdef SEMC_ICS_CAMERA_BLOB
+    virtual status_t        getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer);
+#endif
 
     // Interface used by CameraService
     CameraClient(const sp<CameraService>& cameraService,
diff --git a/services/camera/libcameraservice/device1/CameraHardwareInterface.h b/services/camera/libcameraservice/device1/CameraHardwareInterface.h
index 7e71c87..c22d709 100644
--- a/services/camera/libcameraservice/device1/CameraHardwareInterface.h
+++ b/services/camera/libcameraservice/device1/CameraHardwareInterface.h
@@ -433,6 +433,19 @@ public:
         return OK; // It's fine if the HAL doesn't implement dump()
     }
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+    status_t getRecordingBuffer(unsigned int index, sp<MemoryBase>** buffer)
+    {
+        if (index < CameraHardwareInterface::lastCameraHeapMemory->mNumBufs) {
+            MemoryBase* mb = (MemoryBase*) &CameraHardwareInterface::lastCameraHeapMemory->mBuffers[index];
+            *buffer = &CameraHardwareInterface::lastCameraHeapMemory->mBuffers[index];
+            ALOGV("%s: heap **buffer %p", __FUNCTION__,(void*)*buffer);
+            return OK;
+        }
+        return INVALID_OPERATION;
+    }
+#endif
+
 private:
     camera_device_t *mDevice;
     String8 mName;
@@ -530,6 +543,11 @@ private:
             handle.size = mBufSize * mNumBufs;
             handle.handle = this;
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+            ALOGV("%s: heapbase %p, bufsize %u", __FUNCTION__,
+                 (void*)handle.data, handle.size);
+#endif
+
             mBuffers = new sp<MemoryBase>[mNumBufs];
             for (uint_t i = 0; i < mNumBufs; i++)
                 mBuffers[i] = new MemoryBase(mHeap,
@@ -552,6 +570,11 @@ private:
         camera_memory_t handle;
     };
 
+
+#ifdef SEMC_ICS_CAMERA_BLOB
+static CameraHeapMemory* lastCameraHeapMemory;
+#endif
+
 #ifdef USE_MEMORY_HEAP_ION
     static camera_memory_t* __get_memory(int fd, size_t buf_size, uint_t num_bufs,
                                          void *ion_fd)
@@ -560,6 +583,10 @@ private:
                                          void *user __attribute__((unused)))
 #endif
     {
+#ifdef SEMC_ICS_CAMERA_BLOB
+        ALOGV("%s: fd %d, numbufs %d", __FUNCTION__,
+                     fd, num_bufs);
+#endif
         CameraHeapMemory *mem;
         if (fd < 0)
 #ifdef USE_MEMORY_HEAP_ION
@@ -578,6 +605,10 @@ private:
             *((int *) ion_fd) = mem->mHeap->getHeapID();
 #endif
         mem->incStrong(mem);
+#ifdef SEMC_ICS_CAMERA_BLOB
+        if (num_bufs == 9)
+            lastCameraHeapMemory = mem;
+#endif
         return &mem->handle;
     }
 
@@ -726,6 +757,10 @@ private:
     void *mCbUser;
 };
 
+#ifdef SEMC_ICS_CAMERA_BLOB
+CameraHardwareInterface::CameraHeapMemory* CameraHardwareInterface::lastCameraHeapMemory;
+#endif
+
 };  // namespace android
 
 #endif
-- 
1.7.9.5

