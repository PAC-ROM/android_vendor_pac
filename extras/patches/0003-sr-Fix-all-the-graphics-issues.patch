From b2957bb30307be3db5c0efa7e4b539d71190170e Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Mon, 30 Mar 2015 04:26:56 -0700
Subject: [PATCH 3/6] sr: Fix all the graphics issues

 * Get rid of all the jank and flicker.
 * Fix preserved backbuffer
 * Simplify the code, all drawing happens on a
   single thread now.

Change-Id: I36e1deee0663defd8aea1eba985e3ecbd408eac0
---
 recovery.cpp  |  8 ++---
 screen_ui.cpp | 97 +++++++++++++++++++++++++++--------------------------------
 screen_ui.h   |  5 ++-
 3 files changed, 53 insertions(+), 57 deletions(-)

diff --git a/recovery.cpp b/recovery.cpp
index 7dd3aa7..3c28e79 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -422,6 +422,9 @@ erase_volume(const char *volume, bool force = false) {
 
     saved_log_file* head = NULL;
 
+    ui->SetBackground(RecoveryUI::ERASING);
+    ui->SetProgressType(RecoveryUI::INDETERMINATE);
+
     if (!force && is_cache) {
         // If we're reformatting /cache, we load any
         // "/cache/recovery/last*" files into memory, so we can restore
@@ -468,9 +471,6 @@ erase_volume(const char *volume, bool force = false) {
 
     ui->Print("Formatting %s...\n", volume);
 
-    ui->SetBackground(RecoveryUI::ERASING);
-    ui->SetProgressType(RecoveryUI::INDETERMINATE);
-
     if (volume[0] == '/') {
         ensure_path_unmounted(volume);
     }
@@ -967,7 +967,7 @@ prompt_and_wait(Device* device, int status) {
         switch (status) {
             case INSTALL_SUCCESS:
             case INSTALL_NONE:
-                ui->SetBackground(RecoveryUI::NO_COMMAND);
+                ui->SetBackground(RecoveryUI::NONE);
                 break;
 
             case INSTALL_ERROR:
diff --git a/screen_ui.cpp b/screen_ui.cpp
index 66ca8f8..f6345e2 100644
--- a/screen_ui.cpp
+++ b/screen_ui.cpp
@@ -85,6 +85,8 @@ ScreenRecoveryUI::ScreenRecoveryUI() :
     memset(text, 0, sizeof(text));
 
     pthread_mutex_init(&updateMutex, NULL);
+    pthread_cond_init(&progressCondition, NULL);
+
     self = this;
 }
 
@@ -129,6 +131,8 @@ void ScreenRecoveryUI::draw_background_locked(Icon icon)
             }
         }
 
+        LOGV("textX=%d textY=%d iconX=%d iconY=%d", textX, textY, iconX, iconY);
+
         gr_color(255, 255, 255, 255);
         gr_texticon(textX, textY, text_surface);
     }
@@ -140,9 +144,6 @@ void ScreenRecoveryUI::draw_progress_locked()
 {
     if (currentIcon == ERROR) return;
 
-    gr_color(0, 0, 0, 255);
-    gr_clear();
-
     if (currentIcon == INSTALLING_UPDATE || currentIcon == ERASING) {
         gr_surface icon = installation[installingFrame];
         gr_blit(icon, 0, 0, gr_get_width(icon), gr_get_height(icon), iconX, iconY);
@@ -154,7 +155,7 @@ void ScreenRecoveryUI::draw_progress_locked()
         int height = gr_get_height(progressBarEmpty);
 
         int dx = (gr_fb_width() - width)/2;
-        int dy = (3*gr_fb_height() + iconHeight - 2*height)/4;
+        int dy = (gr_fb_height() / 2) + (iconHeight / 2);
 
         // Erase behind the progress bar (in case this was a progress-only update)
         SetColor(TEXT_FILL);
@@ -246,14 +247,8 @@ void ScreenRecoveryUI::draw_dialog()
 {
     int x, y, w, h;
 
-    if (dialog_show_log) {
-        draw_background_locked(NONE);
-    }
-    else {
-        draw_background_locked(dialog_icon);
-        if (dialog_icon == HEADLESS) {
-            return;
-        }
+   if (dialog_icon == HEADLESS) {
+       return;
     }
     draw_header_icon();
 
@@ -311,23 +306,17 @@ void ScreenRecoveryUI::draw_dialog()
 // Should only be called with updateMutex locked.
 void ScreenRecoveryUI::draw_screen_locked()
 {
-    if (!show_text) {
-        draw_background_locked(currentIcon);
-        draw_progress_locked();
-    } else {
+    draw_background_locked(currentIcon);
 
-        if (DialogShowing()) {
-            draw_dialog();
-            return;
-        }
-        gr_color(0, 0, 0, 255);
-        gr_clear();
+    if (DialogShowing()) {
+        draw_dialog();
+        return;
+    }
 
-        if (currentIcon == INSTALLING_UPDATE || currentIcon == VIEWING_LOG) {
+    if (show_text) {
+        if (currentIcon == ERASING || currentIcon == INSTALLING_UPDATE || currentIcon == VIEWING_LOG) {
             int y = header_height + 4;
 
-            draw_background_locked(currentIcon);
-
             SetColor(LOG);
             int cx, cy;
             gr_set_font("log");
@@ -363,18 +352,9 @@ void ScreenRecoveryUI::draw_screen_locked()
 // Should only be called with updateMutex locked.
 void ScreenRecoveryUI::update_screen_locked()
 {
-    draw_screen_locked();
-    LOGV("%s: flip %p\n", __func__, __builtin_return_address(0));
-    gr_flip();
-}
-
-// Updates only the progress bar, if possible, otherwise redraws the screen.
-// Should only be called with updateMutex locked.
-void ScreenRecoveryUI::update_progress_locked()
-{
-    draw_progress_locked();
-    LOGV("%s: flip %p\n", __func__, __builtin_return_address(0));
-    gr_flip();
+    update_waiting = true;
+    pthread_cond_signal(&progressCondition);
+    LOGV("%s: %p\n", __func__, __builtin_return_address(0));
 }
 
 // Keeps the progress bar updated, even when the process is otherwise busy.
@@ -386,17 +366,21 @@ void* ScreenRecoveryUI::progress_thread(void *cookie) {
 void ScreenRecoveryUI::progress_loop() {
     double interval = 1.0 / animation_fps;
     for (;;) {
-        double start = now();
         pthread_mutex_lock(&updateMutex);
+        if (progressBarType == EMPTY && !update_waiting)
+            pthread_cond_wait(&progressCondition, &updateMutex);
+
+        bool redraw = false;
+        double start = now();
 
-        int redraw = 0;
+        LOGV("loop %f show_text=%d progressBarType=%d waiting=%d\n", start, show_text, progressBarType, update_waiting );
 
         // update the installation animation, if active
         // skip this if we have a text overlay (too expensive to update)
         if ((currentIcon == INSTALLING_UPDATE || currentIcon == ERASING) &&
             installing_frames > 0) {
             installingFrame = (installingFrame + 1) % installing_frames;
-            redraw = 1;
+            redraw = true;
         }
 
         // move the progress bar forward on timed intervals, if configured
@@ -407,23 +391,31 @@ void ScreenRecoveryUI::progress_loop() {
             if (p > 1.0) p = 1.0;
             if (p > progress) {
                 progress = p;
-                redraw = 1;
+                redraw = true;
             }
         }
 
-        if (redraw) update_progress_locked();
+        if (update_waiting || !pagesIdentical) {
+            LOGV("call draw_screen_locked\n");
+            draw_screen_locked();
+            if (!update_waiting)
+                pagesIdentical = true;
+        }
 
-        pthread_mutex_unlock(&updateMutex);
+        if (redraw) {
+            LOGV("call draw_progress_locked\n");
+            draw_progress_locked();
+        }
+        gr_flip();
 
-        if (progressBarType == EMPTY)
-            break;
+        update_waiting = false;
+        pthread_mutex_unlock(&updateMutex);
 
         double end = now();
         // minimum of 20ms delay between frames
         double delay = interval - (end-start);
         if (delay < 0.02) delay = 0.02;
         usleep((long)(delay * 1000000));
-
     }
 }
 
@@ -497,6 +489,8 @@ void ScreenRecoveryUI::Init()
     LoadLocalizedBitmap("no_command_text", &backgroundText[NO_COMMAND]);
     LoadLocalizedBitmap("error_text", &backgroundText[ERROR]);
 
+    pthread_create(&progress_t, NULL, progress_thread, NULL);
+
     RecoveryUI::Init();
 }
 
@@ -541,14 +535,12 @@ void ScreenRecoveryUI::SetProgressType(ProgressType type)
     pthread_mutex_lock(&updateMutex);
     if (progressBarType != type) {
         progressBarType = type;
-        if (progressBarType != EMPTY) {
-            pthread_create(&progress_t, NULL, progress_thread, NULL);
-        }
     }
     progressScopeStart = 0;
     progressScopeSize = 0;
     progress = 0;
-    update_progress_locked();
+
+    update_screen_locked();
     pthread_mutex_unlock(&updateMutex);
 }
 
@@ -561,7 +553,8 @@ void ScreenRecoveryUI::ShowProgress(float portion, float seconds)
     progressScopeTime = now();
     progressScopeDuration = seconds;
     progress = 0;
-    update_progress_locked();
+
+    update_screen_locked();
     pthread_mutex_unlock(&updateMutex);
 }
 
@@ -576,7 +569,7 @@ void ScreenRecoveryUI::SetProgress(float fraction)
         float scale = width * progressScopeSize;
         if ((int) (progress * scale) != (int) (fraction * scale)) {
             progress = fraction;
-            update_progress_locked();
+            update_screen_locked();
         }
     }
     pthread_mutex_unlock(&updateMutex);
diff --git a/screen_ui.h b/screen_ui.h
index a724d7d..1ff28c8 100644
--- a/screen_ui.h
+++ b/screen_ui.h
@@ -77,6 +77,8 @@ class ScreenRecoveryUI : public RecoveryUI {
     bool rtl_locale;
 
     pthread_mutex_t updateMutex;
+    pthread_cond_t  progressCondition;
+
     gr_surface headerIcon;
     gr_surface backgroundIcon[NR_ICONS];
     gr_surface backgroundText[NR_ICONS];
@@ -139,6 +141,8 @@ class ScreenRecoveryUI : public RecoveryUI {
     int header_width;
     int text_first_row;
 
+    bool update_waiting;
+
     void draw_background_locked(Icon icon);
     void draw_progress_locked();
     int  draw_header_icon();
@@ -146,7 +150,6 @@ class ScreenRecoveryUI : public RecoveryUI {
     void draw_dialog();
     void draw_screen_locked();
     void update_screen_locked();
-    void update_progress_locked();
     static void* progress_thread(void* cookie);
     void progress_loop();
 
-- 
1.9.1

